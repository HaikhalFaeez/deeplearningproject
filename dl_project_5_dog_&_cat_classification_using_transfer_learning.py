# -*- coding: utf-8 -*-
"""DL Project 5 - Dog & Cat Classification using Transfer Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F1NqunVaxEvLZF-LzKmH9_mClPeQaBNb

1.  To classify the images of a dog & cat - Binary Classification Problem
2.  Deep Learning Model - Pre-Trained MobileNet V2 Model
3.  Work Flow

    *   Collect Dog & Cat Images Data - Kaggle Dataset (API)
    *   Data Pre-Processing
    *   Train-Test Split
    *   Deep Learning Model - Pre-Trained MobileNet V2 Model
    *   DL Model Evaluation
    *   Develop Prediction System - Feed new data to trained model to predict image of either a cat or a dog

Extracting Dataset using Kaggle API
"""

# installing the kaggle library

!pip install kaggle

# configuring the path of kaggle.json file

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Importing the Dog & Cat Dataset from Kaggle"""

# kaggle api

!kaggle competitions download -c dogs-vs-cats

!ls

# extracting the compressed file - dogs vs cats zip file

from zipfile import ZipFile

dataset = '/content/dogs-vs-cats.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

# extracting the compressed file - train zip file

dataset = '/content/train.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

import os

# counting the number of files in train folder

path, dirs, files = next(os.walk('/content/train'))
file_count = len(files)
print('The number of images: ', file_count)

"""Printing the name & number of images"""

file_names = os.listdir('/content/train')
print(file_names)

file_names = os.listdir('/content/train')

for i in range(5):

  name = file_names[i]
  print(name[0:3])

file_names = os.listdir('/content/train')

dog_count = 0
cat_count = 0

for img_file in file_names:

  name = img_file[0:3]

  if name == 'dog':
    dog_count += 1

  else:
    cat_count += 1

print ('Number of dog images = ', dog_count)
print ('Number of cat images = ', cat_count)

"""Importing the Dependencies"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

"""Displaying the Dogs and Cats Images"""

# display the dog image

img = mpimg.imread('/content/train/dog.6129.jpg')
imgplot = plt.imshow(img)
plt.show()

# display the cat image

img = mpimg.imread('/content/train/cat.8393.jpg')
imgplot = plt.imshow(img)
plt.show()

"""Resizing All the Images"""

# creating the directory for the resized images

os.mkdir('/content/image resized')

original_folder = '/content/train/'
resized_folder = '/content/image resized/'

for i in range(2000):

  filename = os.listdir(original_folder)[i]
  img_path = original_folder + filename

  img = Image.open(img_path)
  img = img.resize((224,224))
  img = img.convert('RGB')

  newimgpath = resized_folder + filename
  img.save(newimgpath)

# display the resized dog image

img = mpimg.imread('/content/image resized/dog.6129.jpg')
imgplot = plt.imshow(img)
plt.show()

# display the cat image

img = mpimg.imread('/content/image resized/cat.8393.jpg')
imgplot = plt.imshow(img)
plt.show()

"""Creating Labels for Resized Images of Dogs & Cats

Cat --> 0

Dog --> 1
"""

# creating a for loop to assign the labels

filenames = os.listdir('/content/image resized/')

labels = []

for i in range(2000):

  file_name = filenames[i]
  label = file_name[0:3]

  if label == 'dog':
    labels.append(1)

  else:
    labels.append(0)

print(filenames[0:5])
print(len(filenames))

print(labels[0:5])
print(len(labels))

# counting the images of dogs and cats out of 2000 images

value, counts = np.unique(labels, return_counts = True)
print(value)
print(counts)

"""Converting the Resized Images to Numpy Array"""

import cv2
import glob

image_directory = '/content/image resized/'
image_extention = ['png', 'jpg']

files = []

[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extention]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

type(dog_cat_images)

dog_cat_images.shape

X = dog_cat_images
Y = np.asarray(labels)

"""Train-Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Normalization"""

# scaling the data

X_train_scaled = X_train/255
X_test_scaled = X_test/255

print(X_train_scaled)

"""Model Training - Transfer Learning (MobileNet V2)"""

!pip install tensorflow==2.15.0 tensorflow-hub

import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4'

pretrained_model = hub.KerasLayer(mobilenet_model, input_shape = (224,224,3), trainable = False)

num_of_classes = 2

model = tf.keras.Sequential([

                             pretrained_model,
                             tf.keras.layers.Dense(num_of_classes) # output layer

])

model.summary()

model.compile(

              optimizer = 'adam',
              loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits = True),
              metrics = ['acc']

)

model.fit(X_train_scaled, Y_train, epochs = 5)

score, acc = model.evaluate(X_test_scaled, Y_test)
print('Test loss = ', score)
print('Test accuracy = ', acc)

"""Building A Predictive System"""

input_image_path = input('Path of the image to be predicted: ')

input_image = cv2.imread(input_image_path) # convert jpg/png image into numpy array

cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))

input_image_scaled = input_image_resize/255

image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)

print(input_prediction)

input_pred_label = np.argmax(input_prediction)

print(input_pred_label)

if input_pred_label == 0:
  print('The image is a cat')

else:
  print('The image is a dog')